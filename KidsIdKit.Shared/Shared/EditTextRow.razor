@using System.Linq.Expressions;
@using System.Reflection;
@using System.ComponentModel.DataAnnotations;

@inherits InputBase<string>

<tr>
  <td>@Label:</td>
  <td><EditText @bind-Value="@CurrentValue" /></td>
</tr>

@code {
#nullable enable
  public string? Label { get; set; }

  protected override void OnParametersSet() 
  {
    var model = EditContext.Model;
    var propertyName = FieldIdentifier.FieldName;
    var pinfo = model.GetType().GetProperty(propertyName);
    var attribute = pinfo?.GetCustomAttribute(typeof(DisplayAttribute)) as DisplayAttribute;
    Label = attribute?.Name ?? FieldIdentifier.FieldName;
  }

  protected override bool TryParseValueFromString(string? value, out string result, out string validationErrorMessage) 
  {
    result = value != null ? value : string.Empty;
    validationErrorMessage = string.Empty;
    return true;
  }
}
