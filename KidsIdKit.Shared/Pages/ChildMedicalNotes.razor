@page "/childMedicalNotes/{id:int}"
@using System.Linq.Expressions;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@inject Data.IDataAccess dal
@inject NavigationManager navigationManager

@if (CurrentChild == null || MedicalNotes == null)
{
    <h2>Medical Notes</h2>
    <p>Loading...</p>
}
else
{
    <h2><a href="/Child/@id">@CurrentChild.GivenName</a></h2>
    <EditForm Model="MedicalNotes" OnSubmit="SaveData">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <table>
            <EditTextRow @bind-Value="MedicalNotes.MedicAlertInfo" />
            <EditTextRow @bind-Value="MedicalNotes.Allergies" />
            <EditTextRow @bind-Value="MedicalNotes.RegularMedications" />
            <EditTextRow @bind-Value="MedicalNotes.PsychMedications" />
            <EditTextRow @bind-Value="MedicalNotes.Notes" />
            <EditBoolRow @bind-Value="MedicalNotes.Inhaler" />
            <EditBoolRow @bind-Value="MedicalNotes.Diabetic" />
        </table>
        <button class="btn btn-primary" type="submit">Save</button>
    </EditForm>
}

@code {
    [Parameter]
    public int id { get; set; }
    Data.ChildDetails? CurrentChild;
    Data.MedicalNotes? MedicalNotes;

    protected override void OnParametersSet()
    {
        if (Main.Family is not null)
        {
            CurrentChild = Main.Family.Children[id].ChildDetails;
            MedicalNotes = Main.Family.Children[id].MedicalNotes;
        }
    }

    private void SaveData()
    {
        try
        {
            if (Main.Family is not null)
                dal.SaveData(Main.Family);
            navigationManager.NavigateTo($"/child/{id}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
        }
    }
}
