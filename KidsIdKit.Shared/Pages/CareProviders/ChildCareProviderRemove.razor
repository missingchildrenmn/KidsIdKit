@page "/CareProviderRemove/{childId:int}/{careId:int}"

@using System.Linq.Expressions;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;

@inject IDataAccess dal
@inject NavigationManager navigationManager

<h2>Remove Care Provider</h2>
@if (CareProvider == null)
{
    <p>Loading...</p>
}
else
{
    <div class="alert-warning">Remove @CareProvider.GivenName @CareProvider.FamilyName ?</div>
    <div>Are you sure you want to remove this care provider?</div>
    <div style="margin-top:10px">
        <button class="btn btn-primary" @onclick="NoCancel">No</button>
        <button class="btn btn-danger" @onclick="YesRemove">Yes</button>
    </div>
}

@code {
    [Parameter]
    public int childId { get; set; }
    [Parameter]
    public int careId { get; set; }

    CareProvider? CareProvider;

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(DataStore.Family);
        CareProvider = DataStore.Family.Children[childId].ProfessionalCareProviders[careId];
    }

    private async Task YesRemove()
    {
        ArgumentNullException.ThrowIfNull(DataStore.Family);
        if (CareProvider is not null)
            DataStore.Family.Children[childId].ProfessionalCareProviders.Remove(CareProvider);
        await dal.SaveDataAsync(DataStore.Family);
        navigationManager.NavigateTo($"/childCareProviders/{childId}");
    }

    private void NoCancel()
    {
        navigationManager.NavigateTo($"/childCareProviders/{childId}");
    }
}
