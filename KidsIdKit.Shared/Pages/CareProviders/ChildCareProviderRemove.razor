@page "/CareProviderRemove/{id:int}/{careid:int}"
@using System.Linq.Expressions;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@inject Data.IDataAccess dal
@inject NavigationManager navigationManager

@if (CareProvider == null)
{
    <h2>Remove CareProvider</h2>
    <p>Loading...</p>
}
else
{
    <h4>Remove careprovider : @CareProvider.GivenName @CareProvider.FamilyName ?</h4>
    <div>Are you sure you want to remove this careprovider from the app?</div>
    <div style="margin-top:10px">
        <button class="btn btn-primary" @onclick="NoCancel">No</button>
        <button class="btn btn-danger" @onclick="YesRemove">Yes</button>
    </div>
}

@code {
    [Parameter]
    public int id { get; set; }
    [Parameter]
    public int careid { get; set; }

    Data.ChildDetails? CurrentChild;
    Data.CareProvider? CareProvider;

    protected override void OnInitialized()
    {
        if (Main.Family is not null)
        {
            CurrentChild = Main.Family.Children[id].ChildDetails;
            CareProvider = Main.Family.Children[id].ProfessionalCareProviders[careid];
        }
    }

    private void YesRemove()
    {
        if (Main.Family is not null && CareProvider is not null)
            Main.Family.Children[id].ProfessionalCareProviders.Remove(CareProvider);
        if (Main.Family is not null)
            dal.SaveData(Main.Family);
        navigationManager.NavigateTo($"/childCareProviders/{id}");
    }

    private void NoCancel()
    {
        navigationManager.NavigateTo($"/childCareProviders/{id}");
    }
}
