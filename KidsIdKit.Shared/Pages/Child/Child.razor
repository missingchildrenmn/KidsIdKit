@page "/Child/{id:int}"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (CurrentChild == null)
{
    <h2>Child Info</h2>
    <p>Loading...</p>
}
else
{
    <h2><a href="/Child/@id">@CurrentChild.ChildDetails.GivenName</a></h2>
    <p>
        <ul>
            <li><a href="/childDetails/@id">Child details</a></li>
            <li><a href="/childPhysicalDetails/@id">Physical details</a></li>
            <li><a href="/childDistinguishingFeatures/@id">Distinguishing features</a></li>
            <li><a href="/childFamilyMembers/@id">Family members</a></li>
            <li><a href="/childFriends/@id">Friends</a></li>
            <li><a href="/childCareProviders/@id">Care providers</a></li>
            <li><a href="/childMedicalNotes/@id">Medical notes</a></li>
        </ul>
    </p>
    @if (!string.IsNullOrWhiteSpace(CurrentChild.ChildDetails.GivenName) && CurrentChild.ChildDetails.GivenName != "<new>")
    {
        <button @onclick="DownloadPdf">Generate Pdf</button>
    }
}

@code {
    [Parameter]
    public int id { get; set; }
    Data.Child? CurrentChild;
    private string? TemplateString { get; set; }
    
    protected override void OnInitialized()
    {
        if (id == -1)
        {
            CurrentChild = new Data.Child();
            CurrentChild.ChildDetails.GivenName = "<new>";
            if (DataStore.Family is not null)
            {
                if (DataStore.Family.Children.Count == 0)
                    CurrentChild.Id = 1;
                else
                    CurrentChild.Id = DataStore.Family.Children.Max(r => r.Id) + 1;
                DataStore.Family.Children.Add(CurrentChild);
                id = DataStore.Family.Children.IndexOf(CurrentChild);
            }
        }
        else
        {
            if (DataStore.Family is not null)
            {
                CurrentChild = DataStore.Family.Children[id];
                SetTemplate();
            }
        }
    }
    
    async Task DownloadPdf()
    {
        await using var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "../PdfGenerator/HtmlToPdf.js");


        // Generate and download the PDF
        await module.InvokeVoidAsync("generateAndDownloadPdf", TemplateString, $"{CurrentChild.ChildDetails.GivenName}.pdf");

        // Generate the PDF and get its content as byte[] (need .NET 6 to support Uint8Array)
        var bytes = await module.InvokeAsync<byte[]>("generatePdf", "<h1>sample</h1>");
    }

    private void SetTemplate()
    {
        TemplateString = $"<h1>{CurrentChild.ChildDetails.GivenName}</h1>" +
                         "<h2>Child Details</h2>" +
                         "<ul>" +
                         $"  <li>Nickname: {CurrentChild.ChildDetails.NickName}</li>" +
                         $"  <li>Birthday: {CurrentChild.ChildDetails.Birthday}</li>" +
                         $"  <li>Additional Info: {CurrentChild.ChildDetails.NickName}</li>" +
                         $"  <li>More Info: {CurrentChild.ChildDetails.NickName}</li>" +
                         "</ul>";
    }
    
}
