@page "/childMedicalNotes/{id:int}"

@inherits DetailsPage

@using System.Linq.Expressions;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;

@inject Data.IDataAccess dal
@inject NavigationManager NavigationManager

<div class="alert-danger">@messageText</div>

@if (CurrentChild == null || MedicalNotes == null)
{
    <h2>Medical notes</h2>
    <p>Loading...</p>
}
else
{
    <h2>@CurrentChild.GivenName</h2>
    <p></p>
    <h3>Medical notes</h3>
    <p></p>
    <EditForm Model="MedicalNotes" OnSubmit="SaveData">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <table>
            <EditTextRow @bind-Value="MedicalNotes.MedicAlertInfo" />
            <EditTextRow @bind-Value="MedicalNotes.Allergies" />
            <EditTextRow @bind-Value="MedicalNotes.RegularMedications" />
            <EditTextRow @bind-Value="MedicalNotes.PsychMedications" />
            <EditTextRow @bind-Value="MedicalNotes.Notes" />
            <EditBoolRow @bind-Value="MedicalNotes.Inhaler" />
            <EditBoolRow @bind-Value="MedicalNotes.Diabetic" />
        </table>
        <div>
            <button type="button" class="btn-back" @onclick="@(() => NavigationManager.NavigateTo($"/child/{Id}"))"><i class="fas fa-chevron-left" /></button>
            <button type="submit" class="btn-save" title="Save"><i class="fas fa-save" /></button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }
    Data.ChildDetails? CurrentChild;
    Data.MedicalNotes? MedicalNotes;

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(DataStore.Family);
        CurrentChild = DataStore.Family.Children[Id].ChildDetails;
        MedicalNotes = DataStore.Family.Children[Id].MedicalNotes;
    }

    private async Task SaveData() => await SaveData($"/child/{Id}");
}
