@page "/FeatureRemove/{childId:int}/{featureId:int}"

@using System.Linq.Expressions;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;

@inject Data.IDataAccess dal
@inject NavigationManager navigationManager

@if (CurrentChild == null)
{
    <h2>Child Details</h2>
    <p>Loading...</p>
}
else
{
    <h2>@CurrentChild.ChildDetails.GivenName</h2>
    <div class="alert-warning">@CurrentFeature!.Description</div>
    <div>Are you sure you want to remove this distinguishing feature?</div>
    <div style="margin-top:10px">
        <button class="btn btn-primary" @onclick="NoCancel">No</button>
        <button class="btn btn-danger" @onclick="YesRemove">Yes</button>
    </div>
}

@code {
    [Parameter]
    public int childId { get; set; }
    [Parameter]
    public int featureId { get; set; }
    Data.Child? CurrentChild;
    Data.DistinguishingFeature? CurrentFeature;

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(DataStore.Family);
        CurrentChild = DataStore.Family.Children[childId];
        CurrentFeature = CurrentChild!.DistinguishingFeatures[featureId];
    }

    private void YesRemove()
    {
        ArgumentNullException.ThrowIfNull(DataStore.Family);
        if (CurrentChild is not null && CurrentFeature is not null)
            DataStore.Family.Children[childId].DistinguishingFeatures.Remove(CurrentFeature);
        dal.SaveDataAsync(DataStore.Family);
        navigationManager.NavigateTo($"/childDistinguishingFeatures/{childId}");
    }

    private void NoCancel()
    {
        navigationManager.NavigateTo($"/childDistinguishingFeatures/{childId}");
    }
}